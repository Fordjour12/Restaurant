
Restaurant Backend:
  ✔ setup linting @done(22-02-03 01:25)
  ✔ push to github @done(22-02-03 01:41)
  ✔ write a README.md files @done(22-02-03 18:22)
  ✔ init the database @started(22-02-05 00:13) @done(22-02-05 00:38) @lasted(25m10s)
  routes:
    foods:
      ☐ getAll
      ☐ get/:id
      ✔ post @done(22-02-09 23:26)
      ☐ update/:id
      ☐ delete/:id
    
    users:
      ☐ post (order food)
      ☐ update/:id


  model:
    ✔ database connection completed @done(22-02-05 01:21)
    ✔ create schema for the database @done(22-02-05 01:52)
    food:
      ✔ create food schema @done(22-02-05 01:52)
      ✔ name food @done(22-02-05 01:52)
      ✔ food image @done(22-02-05 01:52)
      ✔ food price @done(22-02-05 01:52)
      ✔ food description(eg.jollof with chicken) @done(22-02-05 01:52)
      ✔ food type (eg rice pizza) @done(22-02-10 18:02)
      ✔ created at @done(22-02-05 01:52)
      ✔ updated at @done(22-02-05 01:52)
    
    user:
      ✔ create a user schema @done(22-02-05 02:24)
      ✔ username @done(22-02-05 02:24)
      ✔ email @done(22-02-05 02:24)
      ✔ password @done(22-02-05 02:24)
      ✔ created At @done(22-02-05 02:24)
      ✔ updated At @done(22-02-05 02:24)


  controller:
    ✔ login @done(22-02-11 13:22)
    ✔ signup @done(22-02-11 13:22)
    ☐ logout
    ✔ jwt access tokens @done(22-02-11 22:19)
    ☐ jwt refresh tokens
    ☐ jwt refresh token verfication

    food controller:
      ✔ controller for get foods @done(22-02-10 13:32)
      ✔ controller for single foods with id @done(22-02-10 14:12)
      ✔ controller for post new foods @done(22-02-09 23:26)
      ✔ controller for update old/new foods @done(22-02-10 14:52)
      ✔ controller for delete foods @done(22-02-10 14:52)

    user controller: 
      ☐ controller for get foods
      ☐ controller for single foods with id
      ☐ controller for post new foods
      ☐ controller for update old/new foods
      ☐ controller for delete foods
    
    will be done later when all the application takes shape
    ✘ controller for payments with mtn momo api @cancelled(22-02-03 00:44)
    ✘ discount codes for ap users @cancelled(22-02-03 05:49)
  middleware:
    ☐ isAuth/ano
    ☐ upload image
    ☐ validation
  
  env:
    ☐ create a .env file
  
  helper:
    ☐ mongoose connection helper
    ☐ redis connection helper
    ☐ jsonwebtoken helper 
    ☐ generate_key helpers



  


  








 "key": "tab",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"